#!/bin/bash
# - el shebang es sólo para highlight del texto

###
### REFACTORING
###############################################################

## Refactor
## ------------------------------

- Templates para:
	- autores y maintainers: tener archivo con info de cada uno,
	   para copypastear!: en bender_system, por ejemplo.
	- READMES
	- class
	- smach
	- package.xml

- Hacer READMES
- URLS
- WIKI
- poner (mi) firma a los archivos: bender_system. hooks. ...
- agregar gitignores


##  HOOKS
## ------------------------------
- avisar que se puede bypassear el commit usando --no-verify
- archivos de python deben ser ejecutables?
- agregar .aiml a XML
- parece que hay un bug al hacer ctlr-c durante el commit
	- es como que se guardaran cosas en el stash, pero al verlo, está vacio.
- parece que hay un bug durante el commit inicial .. no recuerdo que pasaba
- evitar que se suban binarios comunes: .jpg, pyc, ...
- hook de cpp falla al mostrar warnings
- imprimir al final de todo, una lista de archivos con errores y conteo de
  los errores por archivo
- mensajes más descripivos..
- mail de contacto
- agregar check de que estén instalados los comandos respectivos para cada hook
	- la idea es no matar el commit pk si
	- avisar para poder instalar

## Install
## ------------------------------

- tener carpeta "deps", en bender_ws/deps, donde dejar TODOS los archivos 
  de instalación, excepto cosas que se deben trackear con git (ej: udev rules)
   y forks
	- uso de apt-get download
	- ver si se puede descargar con todas las dependencias.
	- probar con máquina virtual
- chequear que rosdep funcione OK
	$ cd catkin_ws
	$ rosdep install --from-paths src --ignore-src --rosdistro=indigo -y
- usar funcionalidades de rosdep: check, list, ...
- setup del workspace
	- link de scripts
	- bender.sh
- probar setup del workspace
	- en pc limpio
	- uso de submódulos
		- git clone --recursive




## Environment
## ------------------------------

# documentar variables y funciones:
# - - - - - - - - - - - - - - - - -

# paths
BENDER_WS              # bender workspace location    
BENDER_SYSTEM          

# pks
BENDER_PACKAGES_BASE
BENDER_PACKAGES_SOFT
BENDER_PACKAGES_HIGH
BENDER_PACKAGES


# networking settings
BENDER_NET_I           # Your IP address       
BENDER_NET_MASTE       # ROS MASTER IP address           
BENDER_NET_ENABL       # Enable ROS networking (true/false)           
BENDER_NET_WAR         # (dis)plays a warning whe working in offline mode (true/false)         
BENDER_NET_BY_SSH      # marks the entry point as an SSH connection

# mail
BENDER_EMAIL_CONTACT          
BENDER_EMAIL_DEVELOP          

# otros
GITHOOKS_PATH          # git hooks
ROSCONSOLE_FORMAT      # ros console output format    
ROS_MASTER_URI
ROS_IP
ROSLAUNCH_SSH_UNKNOWN


- warnings / --help / doc para funcionalidades
	- que incluya mail de contacto
- ip por no manual
- ipython?? al estilo holandes (o eran alemanes?)
- permitir ejecutar hooks sobre tódo el código/el staged/... sin
  tener que hacer $(git commit). Preferir $(bender_lint)
- agilizar setup.sh
- agregar warning a funcionalidades que modifican el workspace:
	- Are you sure you want to do this? [y/N]


## ROS
## ------------------------------

- agilizar cmakes
- agregar dependencias a packages.xml
- eliminar .srv obsoletos


## OTROS
## -------------------------------

- subtitles se achican, ventana debiera mantener el tamaño!
- ver tue_env
- ver tue_* (en descargas)

